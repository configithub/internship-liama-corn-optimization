/* ----------------------------------------------------------------------------
  Algorithme génétique : croissance du maïs
  
	GAlib :
  Copyright (c) 1995-1996 Massachusetts Institute of Technology

 
---------------------------------------------------------------------------- */
#include <stdio.h>
#include <iostream>
#include <ga/ga.h>
#include <ga/GARealGenome.h>
#include <ga/GARealGenome.C>
#include "Objectif.h"

using namespace std;

float Objective(GAGenome &);

int main(int argc, char** argv)
{
 

//Parametrage pour obtenir un résultats identiques sur plusieurs execution

  unsigned int seed = 0;
  for(int ii=1; ii<argc; ii++) {
    if(strcmp(argv[ii++],"seed") == 0) {
      seed = atoi(argv[ii]);
    }
  }

 
///////////////////////
// création des génomes
///////////////////////



// crée un génome à 33 alleles, comprise aléatoirement entre 0 et 10
	
  GARealAlleleSetArray alleles;
  for(int k=1;k<=33;k++) 
  	alleles.add(0,10);
  GARealGenome genome(alleles, Objective);

// paramétres de l'algorithme génétique 
 
  GAParameterList params;
  GASteadyStateGA::registerDefaultParameters(params);
  params.set(gaNnGenerations, 500);
  params.set(gaNpopulationSize, 110);
  params.set(gaNscoreFrequency, 10);
  params.set(gaNflushFrequency, 50);
  params.set(gaNselectScores, (int)GAStatistics::AllScores);
  params.parse(argc, argv, gaFalse);

// execution de l'algorithme
	  GASteadyStateGA ga(genome);
  ga.parameters(params);
  ga.set(gaNscoreFilename, "bog.dat");
  cout << "\n execution de ga  (maximise le poid de l'epi)..." << endl;
  ga.evolve();
  cout << "l'algorithme a généré :\n" << ga.statistics().bestIndividual() << endl;
  return 0;
}


//fonction objectif : optimisation du poids de l'epi d'une génération à l'autre en gardant un arrosage raisonnable

float
Objective(GAGenome& g)
{
  GARealGenome& genome = (GARealGenome&)g;
  float value=0.0;
  float sommeW=0.0;
  double mepi=0.0;
  Objectif obj;
  obj.recupgenome(genome);
  mepi=obj.masseepi();
  for(int i=0; i<genome.length(); i++)
    sommeW += genome.gene(i);
  if(sommeW>=32 & sommeW<=34)
  {
	  value+=500;
  }
  value+=mepi;
  return value;
}

